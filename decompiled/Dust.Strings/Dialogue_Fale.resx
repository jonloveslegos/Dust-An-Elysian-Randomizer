<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="007_000" xml:space="preserve">
    <value>I've got one last job for you, Dust! There's a strange flying creature called a Florn that lives around these parts - can shoot balls of electricity from its tentacles. A real nasty customer!</value>
  </data>
  <data name="007_010" xml:space="preserve">
    <value>If you could gather (3 Florn Tentacles) and (3 Florn Sparks), I can use them to reinforce our guards' armor and give their weapons a bit of an extra kick! I'll pay a premium for them that you won't get from the shops around here!</value>
  </data>
  <data name="006_000" xml:space="preserve">
    <value>Those reinforcements really helped strengthen the guards' armor, but now it's a bit too rigid. I'd like to add some flexibility using a few materials you can only find on flying pink Avees.</value>
  </data>
  <data name="006_010" xml:space="preserve">
    <value>Let me see... (6 Avee Wings) and (6 Avee Claws) should do the trick! I'll pay you for the work, of course!</value>
  </data>
  <data name="005_000" xml:space="preserve">
    <value>Those hides you provided worked out great, but I'd like to reinforce their armor with materials from those hulking giants out there.</value>
  </data>
  <data name="005_010" xml:space="preserve">
    <value>If you could bring (2 Giant Rocks) and (2 Giant Cores), we'd be all set! I'll pay you way more than you'd get by selling it to the shopkeeper!</value>
  </data>
  <data name="004_000" xml:space="preserve">
    <value>There's a rare material out there that I've heard can be distilled into a very strong lacquer for armor!</value>
  </data>
  <data name="004_010" xml:space="preserve">
    <value>Of course I'm talking about slime. If you could bring me (4 Slimy Spikes) and (4 Slimy Coats), I'll pay you handsomely! I'll even throw in a little extra, since it's likely to be a bit... well, slimy.</value>
  </data>
  <data name="003_020" xml:space="preserve">
    <value>I'd like to upgrade our weapons. Beast spears, while primitive, have finely-chiseled stone tips that we can use for arrowheads!</value>
  </data>
  <data name="003_030" xml:space="preserve">
    <value>If you could bring me (8 Beast Spears), I'll buy them for a high price!</value>
  </data>
  <data name="002_000" xml:space="preserve">
    <value>Here are those materials you asked for, Fale.</value>
  </data>
  <data name="002_010" xml:space="preserve">
    <value>Great! Here's your payment. If you're willing, I could use your help again.</value>
  </data>
  <data name="001_000" xml:space="preserve">
    <value>Please let me know if you come across those materials.</value>
  </data>
  <data name="000_080" xml:space="preserve">
    <value>I'll keep my eyes open.</value>
  </data>
  <data name="000_090" xml:space="preserve">
    <value>Much appreciated! I'll be waiting right here.</value>
  </data>
  <data name="000_020" xml:space="preserve">
    <value>That's great! So, you must know your way around out there! Maybe you could do me a favor?</value>
  </data>
  <data name="000_000" xml:space="preserve">
    <value>Hey, you're the outsider!</value>
  </data>
  <data name="000_030" xml:space="preserve">
    <value>Depends on the favor. What is it you need?</value>
  </data>
  <data name="000_060" xml:space="preserve">
    <value>In... so many words, yes. It's not like I ENJOY giving them sub-par equipment! If I had better materials, I could make better gear!</value>
  </data>
  <data name="000_010" xml:space="preserve">
    <value>Yeah, that's me.</value>
  </data>
  <data name="000_040" xml:space="preserve">
    <value>Well, allow me to introduce myself! My name is Fale, and I'm in charge of keeping our guards well equipped!</value>
  </data>
  <data name="000_070" xml:space="preserve">
    <value>Tell you what? If you could bring me (5 Imp Hides), I would gladly buy them off of you for more than the shop will offer.</value>
  </data>
  <data name="000_050" xml:space="preserve">
    <value>Oh, so their poor equipment is pretty much your fault?</value>
  </data>
  <data name="100_000" xml:space="preserve">
    <value>Great! Here's your payment. I think that's it! I have everything I need thanks to you!</value>
  </data>
  <data name="101_000" xml:space="preserve">
    <value>Thank you, Dust. I think we're set on materials. Best of luck out there!</value>
  </data>
</root>