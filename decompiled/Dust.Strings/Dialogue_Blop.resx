<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="006_000" xml:space="preserve">
    <value>Here's (10 RockHound Teeth), Blop. I'm sure your new teeth will be the talk of the town.</value>
  </data>
  <data name="006_010" xml:space="preserve">
    <value>I think I'm all set! Thank you, son. Ain't no one gonna tell Blop he can't eat corn no more!</value>
  </data>
  <data name="005_000" xml:space="preserve">
    <value>I would love me some teeth! I'm missin' out on a whole lot 'a chewin'!</value>
  </data>
  <data name="004_040" xml:space="preserve">
    <value>Aside from the fact I only got one left? I've been wantin' to construct me some dentures, an' if you can bring me (10 RockHound Teeth), I'd be sittin' pretty. Or smilin' pretty. While I'm sittin'.</value>
  </data>
  <data name="004_070" xml:space="preserve">
    <value>You said it, Fidget. Alright, Blop, I'll get you some teeth.</value>
  </data>
  <data name="004_020" xml:space="preserve">
    <value>Tell you what? Since you're in the huntin' mood, maybe you can help me with my teeth?</value>
  </data>
  <data name="004_050" xml:space="preserve">
    <value>I've been keeping track of all the things people have asked you to do, Dust. This is probably the creepiest one so far.</value>
  </data>
  <data name="004_000" xml:space="preserve">
    <value>Here you go, Blop. (4 Trolk Fingers). Don't spend them all in one place.</value>
  </data>
  <data name="004_035" xml:space="preserve">
    <value>What's wrong with your teeth, Blop?</value>
  </data>
  <data name="004_030" xml:space="preserve">
    <value>I don't see how those two things relate. Also, I don't want to see how those two things relate.</value>
  </data>
  <data name="004_010" xml:space="preserve">
    <value>Woo daisy! Bet I could play the piano with these puppies! That's assumin' I know what a piano is. You done right by me, son. Here's a little token of my 'preciation!</value>
  </data>
  <data name="003_000" xml:space="preserve">
    <value>Get them Trolks, boy! Dispense a good heapin' plate 'a Blop-inspired justice with a side 'a... a side 'a beans! 'Cause beans are delicious when you pair 'em with justice! Yeah!</value>
  </data>
  <data name="002_000" xml:space="preserve">
    <value>Ah, ma' stick! You've found 'er! Now I can get back at that good-fer-nothin' Trolk that done busted up ma' leg!</value>
  </data>
  <data name="002_020" xml:space="preserve">
    <value>Boy, this is a matter a' honor! An' revenge! An' hittin' things with sticks!</value>
  </data>
  <data name="002_010" xml:space="preserve">
    <value>Whoa, hang on, Blop. You'd better not pick any fights in your... uh... condition.</value>
  </data>
  <data name="002_040" xml:space="preserve">
    <value>Bring me their devilish lil' fingers! Four of 'em! No, forty! No! FOUR HUNDRED! Ma' broken leg demands justice!</value>
  </data>
  <data name="002_030" xml:space="preserve">
    <value>Tell you what. I'll beat up some Trolks for you.</value>
  </data>
  <data name="002_060" xml:space="preserve">
    <value>Ahhh, now that's ma' boy!</value>
  </data>
  <data name="002_050" xml:space="preserve">
    <value>How about I gather (4 Trolk Fingers), just for you. Sound good?</value>
  </data>
  <data name="001_000" xml:space="preserve">
    <value>You done found ma' stick? No? Well what're ya' doin' standin' 'round 'ere!? How am I s'posed to hit things without ma' special hittin' stick!?</value>
  </data>
  <data name="000_100" xml:space="preserve">
    <value>Alright, Blop, if I should come across your hitting stick, I'll be sure to pick it up.</value>
  </data>
  <data name="000_080" xml:space="preserve">
    <value>Your what?</value>
  </data>
  <data name="000_090" xml:space="preserve">
    <value>Y'see, I use this 'ere stick to do my hittin'. But I lost 'er in the basement and am honestly just too gal'durn lazy-like to go lookin' for it on my own. They don't have me standin' 'round here for my good looks after all! Someone's gotta defend this 'ere hole!</value>
  </data>
  <data name="000_020" xml:space="preserve">
    <value>Hah, well, yeah, but I don't think you're gonna fit through this 'ere hole in the wall. We had to close up the passage recently to keep those crazed nematodes from comin' out an' attackin' the village.</value>
  </data>
  <data name="000_025" xml:space="preserve">
    <value>What the heck is a nematode!?</value>
  </data>
  <data name="000_000" xml:space="preserve">
    <value>Well, howdy there big fella! Am I hearin' the local gossip, right? You an' your flyin' mongoose are gonna save our village?</value>
  </data>
  <data name="000_005" xml:space="preserve">
    <value>What the heck is a mongoose!?</value>
  </data>
  <data name="000_030" xml:space="preserve">
    <value>Anyway, seems to me the only way you're gettin' through is by sliding. I'd kick you through ma'self, but y'know, I got these fat little legs and they hardly keep me vertical.</value>
  </data>
  <data name="000_060" xml:space="preserve">
    <value>Wait, your underground cave has a basement? How does that make any sense?</value>
  </data>
  <data name="000_010" xml:space="preserve">
    <value>Quiet, Fidget. And yes, you've heard correctly. Is this the way to the Lady's chamber?</value>
  </data>
  <data name="000_040" xml:space="preserve">
    <value>I appreciate the thought, but I'll find another way around.</value>
  </data>
  <data name="000_070" xml:space="preserve">
    <value>Hey, big fella, what d'ya say to me servin' yer flyin' rat a big 'ol jug 'a shut-up juice? While you're down there, why don't you make yourself useful and collect me ma' hittin' stick?</value>
  </data>
  <data name="000_050" xml:space="preserve">
    <value>Here, boy - take this Red Resonance Gem. It'll open up the basement, an' maybe you'll find a better way down there. Just make sure to avoid impalin' yourself on them spiky rocks and thorns!</value>
  </data>
  <data name="010_000" xml:space="preserve">
    <value>Good huntin' out there, boy!</value>
  </data>
</root>